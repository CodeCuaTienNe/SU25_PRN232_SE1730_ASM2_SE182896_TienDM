@page "/appointments/new"
@page "/appointments/edit/{id:int}"
@using DNATestingSystem.BlazorWAS.GraphQLClients.TienDM.Models
@using DNATestingSystem.BlazorWAS.GraphQLClients.TienDM.GraphQLClient
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using static DNATestingSystem.BlazorWAS.GraphQLClients.TienDM.GraphQLClient.GraphQLConsumer
@inject GraphQLConsumer _graphQLConsumer
@inject NavigationManager _navigationManager

<h3>@(IsEditMode ? "Edit Appointment" : "Create New Appointment")</h3>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Loading...</p>
    </div>
}
else if (appointmentDto != null)
{
    <div class="row">
        <div class="col-md-10">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-@(IsEditMode ? "edit" : "plus")"></i>
                        @(IsEditMode ? "Edit" : "New") Appointment Details
                    </h5>
                </div>
                <div class="card-body">
                    <EditForm Model="appointmentDto" OnValidSubmit="HandleSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="alert alert-danger" />                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Customer *</label>
                                    <InputSelect @bind-Value="appointmentDto.UserAccountId" class="form-select">
                                        <option value="0">-- Select Customer --</option>
                                        @if (userOptions != null)
                                        {
                                            @foreach (var user in userOptions)
                                            {
                                                <option value="@user.UserAccountId">@user.UserName (@user.Email)</option>
                                            }
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => appointmentDto.UserAccountId)" class="text-danger" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Service *</label>
                                    <InputSelect @bind-Value="appointmentDto.ServicesNhanVtid" class="form-select">
                                        <option value="0">-- Select Service --</option>
                                        @if (serviceOptions != null)
                                        {
                                            @foreach (var service in serviceOptions)
                                            {
                                                <option value="@service.ServicesNhanVtid">@service.ServiceName - @service.Price.ToString("C")</option>
                                            }
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => appointmentDto.ServicesNhanVtid)" class="text-danger" />
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Appointment Status *</label>
                                    <InputSelect @bind-Value="appointmentDto.AppointmentStatusesTienDmid" class="form-select">
                                        <option value="0">-- Select Status --</option>
                                        @if (appointmentStatusOptions != null)
                                        {
                                            @foreach (var status in appointmentStatusOptions)
                                            {
                                                <option value="@status.AppointmentStatusesTienDmid">@status.StatusName</option>
                                            }
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => appointmentDto.AppointmentStatusesTienDmid)" class="text-danger" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Contact Phone *</label>
                                    <InputText @bind-Value="appointmentDto.ContactPhone" class="form-control" />
                                    <ValidationMessage For="@(() => appointmentDto.ContactPhone)" class="text-danger" />
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Appointment Date *</label>
                                    <InputDate @bind-Value="appointmentDateHelper" class="form-control" />
                                    <ValidationMessage For="@(() => appointmentDto.AppointmentDate)" class="text-danger" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Appointment Time *</label>
                                    <InputText @bind-Value="appointmentTimeHelper" class="form-control" placeholder="14:30:00" />
                                    <ValidationMessage For="@(() => appointmentDto.AppointmentTime)" class="text-danger" />
                                    <small class="form-text text-muted">Format: HH:mm:ss (e.g., 14:30:00)</small>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Total Amount *</label>
                                    <InputNumber @bind-Value="appointmentDto.TotalAmount" class="form-control" step="0.01" />
                                    <ValidationMessage For="@(() => appointmentDto.TotalAmount)" class="text-danger" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Payment Status</label>
                                    <InputSelect @bind-Value="appointmentDto.IsPaid" class="form-select">
                                        <option value="false">Unpaid</option>
                                        <option value="true">Paid</option>
                                    </InputSelect>
                                    <ValidationMessage For="@(() => appointmentDto.IsPaid)" class="text-danger" />
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Sampling Method *</label>
                            <InputSelect @bind-Value="appointmentDto.SamplingMethod" class="form-select">
                                <option value="">-- Select Sampling Method --</option>
                                <option value="Home Visit">Home Visit</option>
                                <option value="Clinic Visit">Clinic Visit</option>
                                <option value="Lab Collection">Lab Collection</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => appointmentDto.SamplingMethod)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Address</label>
                            <InputTextArea @bind-Value="appointmentDto.Address" class="form-control" rows="3" />
                            <ValidationMessage For="@(() => appointmentDto.Address)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Notes</label>
                            <InputTextArea @bind-Value="appointmentDto.Notes" class="form-control" rows="4" />
                            <ValidationMessage For="@(() => appointmentDto.Notes)" class="text-danger" />
                        </div>

                        <div class="mb-3 d-flex gap-2">
                            <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                }
                                <i class="fas fa-save"></i> @(IsEditMode ? "Update" : "Create") Appointment
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancel">
                                <i class="fas fa-times"></i> Cancel
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int? Id { get; set; }

    private CreateAppointmentsTienDmDto? appointmentDto;
    private UpdateAppointmentsTienDmDto? updateAppointmentDto;
    private bool isSubmitting = false;
    private bool isLoading = true;

    private DateTime appointmentDateHelper = DateTime.Today;
    private string appointmentTimeHelper = "09:00:00";

    // Dropdown options
    private List<UserOption>? userOptions;
    private List<ServiceOption>? serviceOptions;
    private List<AppointmentStatusOption>? appointmentStatusOptions;

    private bool IsEditMode => Id.HasValue && Id > 0;    protected override async Task OnInitializedAsync()
    {
        await LoadDropdownData();
        await LoadAppointment();
    }

    private async Task LoadDropdownData()
    {
        try
        {
            // Load all dropdown data in parallel for better performance
            var userTask = _graphQLConsumer.GetUserOptions();
            var serviceTask = _graphQLConsumer.GetServiceOptions();
            var statusTask = _graphQLConsumer.GetAppointmentStatusOptions();

            await Task.WhenAll(userTask, serviceTask, statusTask);

            userOptions = await userTask;
            serviceOptions = await serviceTask;
            appointmentStatusOptions = await statusTask;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dropdown data: {ex.Message}");
            // Initialize empty lists to prevent null reference errors
            userOptions = new List<UserOption>();
            serviceOptions = new List<ServiceOption>();
            appointmentStatusOptions = new List<AppointmentStatusOption>();
        }
    }

    private async Task LoadAppointment()
    {
        isLoading = true;
        try
        {
            if (IsEditMode && Id.HasValue)
            {
                var displayDto = await _graphQLConsumer.GetAppointmentDisplayById(Id.Value);
                if (displayDto.AppointmentsTienDmid > 0)
                {
                    // Convert to update DTO
                    updateAppointmentDto = new UpdateAppointmentsTienDmDto
                    {
                        AppointmentsTienDmid = displayDto.AppointmentsTienDmid,
                        UserAccountId = displayDto.UserAccountId,
                        ServicesNhanVtid = displayDto.ServicesNhanVtid,
                        AppointmentStatusesTienDmid = displayDto.AppointmentStatusesTienDmid,
                        AppointmentDate = displayDto.AppointmentDate,
                        AppointmentTime = displayDto.AppointmentTime,
                        SamplingMethod = displayDto.SamplingMethod,
                        Address = displayDto.Address,
                        ContactPhone = displayDto.ContactPhone,
                        Notes = displayDto.Notes,
                        TotalAmount = displayDto.TotalAmount,
                        IsPaid = displayDto.IsPaid ?? false
                    };

                    // Set helpers for UI binding
                    appointmentDateHelper = displayDto.AppointmentDate.ToDateTime(TimeOnly.MinValue);
                    appointmentTimeHelper = displayDto.AppointmentTime.ToString("HH:mm:ss");

                    // Use create DTO for form binding (since they have same properties)
                    appointmentDto = new CreateAppointmentsTienDmDto
                    {
                        UserAccountId = displayDto.UserAccountId,
                        ServicesNhanVtid = displayDto.ServicesNhanVtid,
                        AppointmentStatusesTienDmid = displayDto.AppointmentStatusesTienDmid,
                        AppointmentDate = displayDto.AppointmentDate,
                        AppointmentTime = displayDto.AppointmentTime,
                        SamplingMethod = displayDto.SamplingMethod,
                        Address = displayDto.Address,
                        ContactPhone = displayDto.ContactPhone,
                        Notes = displayDto.Notes,
                        TotalAmount = displayDto.TotalAmount,
                        IsPaid = displayDto.IsPaid ?? false
                    };
                }
                else
                {
                    _navigationManager.NavigateTo("/appointments");
                    return;
                }
            }
            else
            {
                // Create new appointment
                appointmentDto = new CreateAppointmentsTienDmDto
                {
                    AppointmentDate = DateOnly.FromDateTime(DateTime.Today),
                    AppointmentTime = TimeOnly.Parse("09:00:00"),
                    TotalAmount = 0,
                    ContactPhone = "",
                    SamplingMethod = "",
                    UserAccountId = 1,
                    ServicesNhanVtid = 1,
                    AppointmentStatusesTienDmid = 1,
                    IsPaid = false
                };
            }
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error loading appointment: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleSubmit()
    {
        if (appointmentDto == null) return;

        // Update the DTO with helper values
        appointmentDto.AppointmentDate = DateOnly.FromDateTime(appointmentDateHelper);
        if (TimeOnly.TryParse(appointmentTimeHelper, out var time))
        {
            appointmentDto.AppointmentTime = time;
        }

        isSubmitting = true;
        int result = 0;

        try
        {            if (IsEditMode && updateAppointmentDto != null && Id.HasValue)
            {
                // Update existing appointment - make sure ID is preserved
                updateAppointmentDto.AppointmentsTienDmid = Id.Value; // Ensure ID is set correctly
                updateAppointmentDto.UserAccountId = appointmentDto.UserAccountId;
                updateAppointmentDto.ServicesNhanVtid = appointmentDto.ServicesNhanVtid;
                updateAppointmentDto.AppointmentStatusesTienDmid = appointmentDto.AppointmentStatusesTienDmid;
                updateAppointmentDto.AppointmentDate = appointmentDto.AppointmentDate;
                updateAppointmentDto.AppointmentTime = appointmentDto.AppointmentTime;
                updateAppointmentDto.SamplingMethod = appointmentDto.SamplingMethod;
                updateAppointmentDto.Address = appointmentDto.Address;
                updateAppointmentDto.ContactPhone = appointmentDto.ContactPhone;
                updateAppointmentDto.Notes = appointmentDto.Notes;
                updateAppointmentDto.TotalAmount = appointmentDto.TotalAmount;
                updateAppointmentDto.IsPaid = appointmentDto.IsPaid;

                result = await _graphQLConsumer.UpdateAppointmentDto(updateAppointmentDto);
            }
            else
            {
                // Create new appointment
                result = await _graphQLConsumer.CreateAppointmentDto(appointmentDto);
            }

            if (result > 0)
            {
                _navigationManager.NavigateTo("/appointments", false);
            }
        }
        catch (Exception ex)
        {
            // Handle error - could add toast notification here
            Console.WriteLine($"Error saving appointment: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Cancel()
    {
        _navigationManager.NavigateTo("/appointments");
    }
}
