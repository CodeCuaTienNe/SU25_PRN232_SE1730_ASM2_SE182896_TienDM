@page "/login"
@layout BlankLayout

@using DNATestingSystem.BlazorWAS.GraphQLClients.TienDM.GraphQLClient
@inject GraphQLConsumer GraphQLConsumer


<div class="login-center">
    <div class="login-box">
        <h2 class="login-title">Login</h2>
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger">@ErrorMessage</div>
        }
        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3">
                <label for="username" class="form-label">Username</label>
                <InputText id="username" class="form-control" @bind-Value="loginModel.Username" placeholder="Username" />
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" placeholder="Password" autocomplete="current-password" />
            </div>
            <button type="submit" class="btn btn-primary w-100">Login</button>
        </EditForm>
    </div>
</div>
<style>
.login-center {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #f5f6fa;
}
.login-box {
    background: #fff;
    border-radius: 12px;
    box-shadow: 0 4px 24px rgba(0,0,0,0.08);
    padding: 2rem 1.5rem 1.5rem 1.5rem;
    min-width: 320px;
    max-width: 340px;
    width: 100%;
}
.login-title {
    text-align: center;
    font-size: 2rem;
    font-weight: 700;
    margin-bottom: 1.5rem;
    color: #6366f1;
}
.form-label {
    font-weight: 500;
}
.btn-primary {
    background: #6366f1;
    border: none;
    font-weight: 600;
    letter-spacing: 1px;
    transition: background 0.2s;
}
.btn-primary:hover {
    background: #4f46e5;
}
.alert-danger {
    width: 100%;
    text-align: center;
    margin-bottom: 1rem;
}
</style>

@code {
    private LoginModel loginModel = new();
    private string? ErrorMessage;

    [Inject] private NavigationManager Navigation { get; set; }
    [Inject] private IJSRuntime JS { get; set; }

    private async Task HandleLogin()
    {
        ErrorMessage = null;
        Console.WriteLine($"[Login Debug] Username: {loginModel.Username}, Password: {loginModel.Password}");
        await JS.InvokeVoidAsync("console.log", $"[Login Debug JS] Username: {loginModel.Username}, Password: {loginModel.Password}");
        
        try
        {
            var user = await GraphQLConsumer.LoginAsync(loginModel.Username, loginModel.Password);
            if (user != null)
            {
                Console.WriteLine($"[Login Success] User logged in: {user.FullName}");
                // Lưu user vào localStorage
                await JS.InvokeVoidAsync("localStorage.setItem", "user", System.Text.Json.JsonSerializer.Serialize(user));
                Navigation.NavigateTo("/appointments");
            }
            else
            {
                Console.WriteLine("[Login Failed] No user returned from GraphQL");
                ErrorMessage = "Sai tài khoản hoặc mật khẩu.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Login Error] Exception: {ex.Message}");
            ErrorMessage = $"Lỗi kết nối: {ex.Message}";
        }
    }

    public class LoginModel
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
    // Không cần class phụ nữa, đã dùng model SystemUserAccount
}
